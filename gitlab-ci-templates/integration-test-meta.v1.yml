# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0

include:
  - project: labs/salt-automation
    file:
      - gitlab-ci-templates/python/pytest-meta.v1.yml

# NOTE: These templates are imported and used by our other components to run integration tests
# against OS2mo. It's very easy to break tests in the other repos by changing something here.

variables:
  # The default config file for OS2mo-init is (re-)declared to allow integrations to
  # overwrite with their own classes and IT-systems.
  OS2MO_INIT_CONFIG: "/config/config.yml"

.variables:mo:
  # NOTE: These variables are duplicated to .integration-test:mo.services below.
  variables:
    # https://docs.python.org/3/library/devmode.html
    PYTHONDEVMODE: "1"
    PYTHONMALLOC: "default"

    DB_HOST: "mox-db"
    DB_NAME: "mox"
    DB_USER: "mox"
    DB_PASSWORD: "mox"

    KEYCLOAK_SCHEMA: "http"
    KEYCLOAK_PORT: 8080
    KEYCLOAK_AUTH_SERVER_URL: "http://keycloak:8080/auth/"
    KEYCLOAK_VERIFY_AUDIENCE: "false"

    ENVIRONMENT: "testing"
    LORA_AUTH: "false"
    INSECURE_ENABLE_TESTING_API: "true"

    AMQP_ENABLE: "true"
    AMQP_URL: "amqp://guest:guest@msg-broker:5672/"

.services:mo-backing:
  services:
    # LoRa postgres database
    - name: postgres:11.22-bookworm
      alias: mox-db
      # TODO: remove custom entrypoint when tests no longer depend on pgtap
      entrypoint:
        - "sh"
        - "-c"
        - |
          # Install pgtap
          apt-get update
          apt-get install -y postgresql-11-pgtap
          # Run image as normally (from `docker image inspect`)
          exec docker-entrypoint.sh postgres
      variables:
        POSTGRES_DB: mox
        POSTGRES_USER: mox
        POSTGRES_PASSWORD: mox
    # RabbitMQ AMQP
    # The -management images come with a set of management plugins installed and
    # enabled by default. They can be accessed through the web interface on port 15672.
    # The credentials are guest/guest. The HTTP API is required by the integration
    # tests in FastRAMQPI to inspect and reset queues.
    - name: rabbitmq:3-management
      alias: msg-broker
    # Keycloak
    # `:latest` here is actually latest and not a cached version because we run
    # our GitLab runners in Kubernetes, which defaults the imagePullPolicy to
    # `Always` when the tag is `latest`.
    # https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
    - name: magentaaps/os2mo-keycloak:latest
      alias: keycloak
      variables:
        KC_HOSTNAME_URL: http://keycloak:8080/auth
        KC_HOSTNAME_ADMIN_URL: http://keycloak:8080/auth
        KEYCLOAK_ADMIN: admin
        KEYCLOAK_ADMIN_PASSWORD: admin
        KC_DB_URL_HOST: mox-db
        KC_DB_USERNAME: mox
        KC_DB_PASSWORD: mox
      # Since GitLab CI doesn't support multiple services on the same port,
      # we cannot (easily) run a separate postgres for keycloak. Override to use
      # in-memory instead.
      command: ["start", "-Dkeycloak.saml.deprecated.encryption=true", "--db=dev-mem"]
    - name: magentaaps/os2mo-keycloak-realm-builder:7  # please also update docker-compose
      variables:
        # Since GitLab CI doesn't support multiple services on the same port,
        # we cannot (easily) run a separate postgres for the realm builder's
        # terraform state. Reuse the mox database instead.
        POSTGRES_CONNECTION_STRING: "postgres://mox:mox@mox-db/mox?sslmode=disable"
        KEYCLOAK_URL: "http://keycloak:8080"
        KEYCLOAK_ADMIN_USERNAME: "admin"
        KEYCLOAK_ADMIN_PASSWORD: "admin"
        KEYCLOAK_SSL_REQUIRED_MO: "external"
        KEYCLOAK_MO_CLIENT_REDIRECT_URI: '["*"]'
        KEYCLOAK_MO_CLIENT_WEB_ORIGIN: '["*"]'
        # NOTE: the list of keycloak realm users is identical to the one is
        # docker-compose.yml.
        KEYCLOAK_REALM_USERS: '[
          {
            "enabled": true,
            "uuid": "0fb62199-cb9e-4083-ba45-2a63bfd142d7",
            "email": "alvidan@kolding.dk",
            "username": "alvida",
            "password": "alvida",
            "firstname": "Alvida",
            "lastname": "Nibe",
            "roles": ["admin", "service_api"]
          },
          {
            "enabled": true,
            "uuid": "99e7b256-7dfa-4ee8-95c6-e3abe82e236a",
            "email": "bruce@kung.fu",
            "username": "bruce",
            "password": "bruce",
            "firstname": "Bruce",
            "lastname": "Lee",
            "roles": ["reader", "service_api"]
          },
          {
            "enabled": true,
            "uuid": "1c571f8f-0e3e-4ffa-9ff0-d35505781924",
            "email": "elinec@kolding.dk",
            "username": "eline",
            "password": "eline",
            "firstname": "Eline",
            "lastname": "Wedsgaard Christensen",
            "roles": ["owner", "reader", "service_api"]
          },
          {
            "enabled": true,
            "uuid": "53181ed2-f1de-4c4a-a8fd-ab358c2c454a",
            "email": "anders@andeby.dk",
            "username": "anders",
            "password": "anders",
            "firstname": "Anders",
            "lastname": "And",
            "roles": ["owner", "reader", "service_api"]
          }
        ]'
      entrypoint:
        - "sh"
        - "-c"
        - |
          # GitLab CI services are one-shot without any restart policy, and does not
          # start in the order they are defined. To replicate init containers, the
          # entrypoint of the service is overwritten to retry until it succeeds.
          while ! sh run.sh; do
            sleep 1
          done
    - name: magentaaps/os2mo-keycloak-integration-builder:5
      variables:
        POSTGRES_CONNECTION_STRING: "postgres://mox:mox@mox-db/mox?sslmode=disable"
        POSTGRES_SCHEMA_NAME: terraform_remote_state_dipex_client
        TF_VAR_url: "http://keycloak:8080"
        TF_VAR_admin_password: "admin"
        TF_VAR_client_name: dipex
        TF_VAR_client_secret: "603f1c82-d012-4d04-9382-dbe659c533fb"
        TF_VAR_client_uuid: "d1fec000-baad-c0de-0000-004449504558"
        TF_VAR_client_roles: '["admin", "service_api"]'
      entrypoint:
        - "sh"
        - "-c"
        - |
          while ! sh run.sh; do
            sleep 1
          done
          # GitLab does not wait for services without an EXPOSE (port) definition
          # before starting the main job. As a workaround we touch a sentinel in
          # /builds, which is shared among all jobs, and wait for it in the main job's
          # before_script. See https://docs.gitlab.com/ee/ci/services/ for more info.
          touch /builds/.mo-backing-services-ready
  before_script:
    - |
      while [ ! -f /builds/.mo-backing-services-ready ]; do
        echo 'Waiting for backing-services...'
        sleep 1
      done

.integration-test:mo:
  extends:
    - .pytest
  parallel: 2
  variables:
    PYTEST_ADDOPTS: "-m 'integration_test'"
    # Define FastRAMQPI settings for the recommended settings structure
    FASTRAMQPI__MO_URL: "http://mo:5000"
    FASTRAMQPI__CLIENT_ID: "dipex"
    FASTRAMQPI__CLIENT_SECRET: "603f1c82-d012-4d04-9382-dbe659c533fb"
    FASTRAMQPI__AUTH_SERVER: "http://keycloak:8080/auth"
    FASTRAMQPI__AUTH_REALM: "mo"
    FASTRAMQPI__AMQP__URL: "amqp://guest:guest@msg-broker:5672/"
    FASTRAMQPI__DATABASE__USER: "fastramqpi"
    FASTRAMQPI__DATABASE__PASSWORD: "fastramqpi"
    FASTRAMQPI__DATABASE__HOST: "db"
    FASTRAMQPI__DATABASE__PORT: "54321"
    FASTRAMQPI__DATABASE__NAME: "fastramqpi"
  services:
    - !reference [ .services:mo-backing, services ]
    - name: magentaaps/os2mo:latest
      alias: mo
      # NOTE: These variables are duplicated from .variables:mo.variables above.
      # Ideally, we would simply `!reference [ .variables:mo, variables ]` to avoid
      # duplication, but while that works for the GitLab CI pipeline *in this repo*,
      # it DOES NOT work in other repos which `include` the template and extend it.
      # This is because `!reference` actually imports the referenced values as a
      # (nested) LIST and depends on the fact that most tags (such as `script`) know
      # how to unflatten the nested lists (up to a limit of 10). The `variables` tag
      # has bad support for this un-nesting, and therefore does not work properly when
      # we have too many layers of references and nested lists. Therefore:
      # YOU CANNOT REFACTOR THIS AND ASSUME IT WORKS IF THE PIPELINE HERE IS GREEN!
      # https://gitlab.com/gitlab-org/gitlab/-/issues/434157
      variables:
        # https://docs.python.org/3/library/devmode.html
        PYTHONDEVMODE: "1"
        PYTHONMALLOC: "default"

        DB_HOST: "mox-db"
        DB_NAME: "mox"
        DB_USER: "mox"
        DB_PASSWORD: "mox"

        KEYCLOAK_SCHEMA: "http"
        KEYCLOAK_PORT: 8080
        KEYCLOAK_AUTH_SERVER_URL: "http://keycloak:8080/auth/"
        KEYCLOAK_VERIFY_AUDIENCE: "false"

        ENVIRONMENT: "testing"
        LORA_AUTH: "false"
        INSECURE_ENABLE_TESTING_API: "true"

        AMQP_ENABLE: "true"
        AMQP_URL: "amqp://guest:guest@msg-broker:5672/"
      entrypoint:
        - "sh"
        - "-c"
        - |
          while ! ./docker/start.sh; do
            sleep 1
          done
    - name: magentaaps/os2mo-init:5
      variables:
        CONFIG_FILE: $OS2MO_INIT_CONFIG
        MO_URL: "http://mo:5000"
        CLIENT_ID: "dipex"
        CLIENT_SECRET: "603f1c82-d012-4d04-9382-dbe659c533fb"
        AUTH_SERVER: "http://keycloak:8080/auth"
        AUTH_REALM: "mo"
      entrypoint:
        - "sh"
        - "-c"
        - |
          if [ -n "$OS2MO_INIT_CONFIG" ]; then
            while ! python -m os2mo_init; do
              sleep 1
            done
          else
            echo 'OS2MO_INIT_CONFIG is empty: Skipping OS2mo-init'
          fi
          touch /builds/.os2mo-init-finished
    - name: postgres:16
      alias: db
      command: ["postgres", "-c", "port=54321"]
      variables:
        POSTGRES_USER: "fastramqpi"
        POSTGRES_PASSWORD: "fastramqpi"
        POSTGRES_DB: "fastramqpi"
  before_script:
    - !reference [ .pytest, before_script ]
    - !reference [ .services:mo-backing, before_script ]
    - |
      while [ ! -f /builds/.os2mo-init-finished ]; do
        echo 'Waiting for os2mo-init...'
        sleep 1
      done
